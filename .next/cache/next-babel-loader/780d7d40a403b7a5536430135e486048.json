{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useRef, useStats, useEffect } from 'react';\nimport root from 'react-shadow';\nimport { chromeSwitch } from '../../../OLEx/dist/index.js';\nimport * as Polyglot from 'node-polyglot';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport DragControls from 'three-dragcontrols';\nexport var Box = React.forwardRef(function Box(props, ref) {\n  // Set up state for the hovered and active state\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hovered = _useState2[0],\n      setHover = _useState2[1]; // Rotate mesh every frame, this is outside of React without overhead\n\n\n  return __jsx(\"mesh\", _extends({}, props, {\n    ref: ref,\n    scale: (hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(function (v) {\n      return v * props.scale;\n    }),\n    onPointerOver: function onPointerOver(e) {\n      return setHover(true);\n    },\n    onPointerOut: function onPointerOut(e) {\n      return setHover(false);\n    }\n  }), __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1].map(function (v) {\n      return v * props.scale;\n    })\n  }), __jsx(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: props.color\n  }));\n});\n\nvar ThreeRef = function ThreeRef(props) {\n  props.setThree(useThree());\n  return null;\n};\n\nexport default (function (props) {\n  var Desktop = props.dcls;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      three = _useState4[0],\n      setThree = _useState4[1];\n\n  if (three) var camera = three.camera,\n      gl = three.gl;\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      objs = _useState6[0],\n      setObjs = _useState6[1];\n\n  if (!objs) setObjs([]);\n  useEffect(function () {\n    var d = new DragControls(objs, camera, gl.domElements);\n    return d.dispose.bind(d);\n  }, [props.dcls, objs]);\n  return __jsx(Canvas, null, __jsx(Desktop, {\n    Div: Box,\n    Window: function Window(wprops) {\n      var r = useRef();\n      useEffect(function () {\n        setObjs((objs || []).concat([r.current]));\n        return function () {\n          return setObjs(objs.filter(function (o) {\n            return o !== r.current;\n          }));\n        };\n      });\n      return __jsx(Box, _extends({}, wprops, {\n        ref: r\n      }));\n    },\n    Iframe: Box\n  }), __jsx(ThreeRef, {\n    setThree: setThree\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}
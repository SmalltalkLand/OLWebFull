{"ast":null,"code":"import { useRef, useEffect } from 'react';\nexport default function useEventListener(eventName, handler, onName, offName) {\n  var element = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window;\n  // Create a ref that stores handler\n  var savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(function () {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(function () {\n    // Make sure element supports addEventListener\n    // On \n    var isSupported = element && element[onName];\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    var eventListener = function eventListener() {\n      return savedHandler.current.apply(savedHandler, arguments);\n    }; // Add event listener\n\n\n    element[onName](eventName, eventListener); // Remove event listener on cleanup\n\n    return function () {\n      element[offName](eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n;","map":{"version":3,"sources":["/home/graham/st/OLWebFull/src/handler.js"],"names":["useRef","useEffect","useEventListener","eventName","handler","onName","offName","element","window","savedHandler","current","isSupported","eventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA6CC,MAA7C,EAAoDC,OAApD,EAA8E;AAAA,MAAjBC,OAAiB,uEAAPC,MAAO;AACzF;AACA,MAAMC,YAAY,GAAGT,MAAM,EAA3B,CAFyF,CAIzF;AACA;AACA;AACA;;AACAC,EAAAA,SAAS,CAAC,YAAM;AACdQ,IAAAA,YAAY,CAACC,OAAb,GAAuBN,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CACP,YAAM;AACJ;AACA;AACA,QAAMU,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACF,MAAD,CAAtC;AACA,QAAI,CAACM,WAAL,EAAkB,OAJd,CAMJ;;AACA,QAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,aAAWH,YAAY,CAACC,OAAb,OAAAD,YAAY,YAAvB;AAAA,KAAtB,CAPI,CASJ;;;AACAF,IAAAA,OAAO,CAACF,MAAD,CAAP,CAAgBF,SAAhB,EAA2BS,aAA3B,EAVI,CAYJ;;AACA,WAAO,YAAM;AACXL,MAAAA,OAAO,CAACD,OAAD,CAAP,CAAiBH,SAAjB,EAA4BS,aAA5B;AACD,KAFD;AAGD,GAjBM,EAkBP,CAACT,SAAD,EAAYI,OAAZ,CAlBO,CAkBc;AAlBd,GAAT;AAoBD;AAAA","sourcesContent":["import { useRef, useEffect } from 'react';\nexport default function useEventListener(eventName, handler,onName,offName, element = window){\n    // Create a ref that stores handler\n    const savedHandler = useRef();\n    \n    // Update ref.current value if handler changes.\n    // This allows our effect below to always get latest handler ...\n    // ... without us needing to pass it in effect deps array ...\n    // ... and potentially cause effect to re-run every render.\n    useEffect(() => {\n      savedHandler.current = handler;\n    }, [handler]);\n  \n    useEffect(\n      () => {\n        // Make sure element supports addEventListener\n        // On \n        const isSupported = element && element[onName];\n        if (!isSupported) return;\n        \n        // Create event listener that calls handler function stored in ref\n        const eventListener = (...es) => savedHandler.current(...es);\n        \n        // Add event listener\n        element[onName](eventName, eventListener);\n        \n        // Remove event listener on cleanup\n        return () => {\n          element[offName](eventName, eventListener);\n        };\n      },\n      [eventName, element] // Re-run if eventName or element changes\n    );\n  };"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"D:\\\\Graham\\\\ObjectLand\\\\main\\\\OLWebFull\\\\src\\\\lang.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ReactDOM from 'react-dom';\n\nfunction strip(html) {\n  var doc = new DOMParser().parseFromString(html, 'text/html');\n  return doc.body.textContent || \"\";\n}\n\nexport default function changeLanguage(set, theRef) {\n  var lang, win, confirmed;\n  return _regeneratorRuntime.async(function changeLanguage$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          lang = prompt('language');\n          win = open('https://'.concat(lang.concat('.wikipedia.org')), {\n            mode: 'cors'\n          });\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(new _Promise(function (c) {\n            ReactDOM.render(__jsx(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 9\n              },\n              __self: this\n            }, __jsx(\"button\", {\n              onClick: c.bind(null, true),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 9\n              },\n              __self: this\n            }, \"Confirm\"), __jsx(\"button\", {\n              onClick: c.bind(null, false),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 9\n              },\n              __self: this\n            }, \"Cancel\")), theRef.current);\n          }));\n\n        case 4:\n          confirmed = _context.sent;\n          win.close();\n          if (confirmed) set(lang);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["D:/Graham/ObjectLand/main/OLWebFull/src/lang.js"],"names":["ReactDOM","strip","html","doc","DOMParser","parseFromString","body","textContent","changeLanguage","set","theRef","lang","prompt","win","open","concat","mode","c","render","bind","current","confirmed","close"],"mappings":";;;;;AAAA,OAAOA,QAAP,MAAqB,WAArB;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAoB;AAChB,MAAIC,GAAG,GAAG,IAAIC,SAAJ,GAAgBC,eAAhB,CAAgCH,IAAhC,EAAsC,WAAtC,CAAV;AACA,SAAOC,GAAG,CAACG,IAAJ,CAASC,WAAT,IAAwB,EAA/B;AACF;;AACF,eAAe,SAAeC,cAAf,CAA8BC,GAA9B,EAAkCC,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,UAAAA,IADO,GACAC,MAAM,CAAC,UAAD,CADN;AAEPC,UAAAA,GAFO,GAEAC,IAAI,CAAC,WAAWC,MAAX,CAAkBJ,IAAI,CAACI,MAAL,CAAY,gBAAZ,CAAlB,CAAD,EAAkD;AAACC,YAAAA,IAAI,EAAE;AAAP,WAAlD,CAFJ;AAAA;AAAA,2CAGW,aAAY,UAAAC,CAAC,EAAI;AAAKjB,YAAAA,QAAQ,CAACkB,MAAT,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAG;AAAQ,cAAA,OAAO,EAAID,CAAC,CAACE,IAAF,CAAO,IAAP,EAAY,IAAZ,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAH,EAAyD;AAAQ,cAAA,OAAO,EAAIF,CAAC,CAACE,IAAF,CAAO,IAAP,EAAY,KAAZ,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAzD,CAAhB,EAAoIT,MAAM,CAACU,OAA3I;AAAqJ,WAA3K,CAHX;;AAAA;AAGPC,UAAAA,SAHO;AAKfR,UAAAA,GAAG,CAACS,KAAJ;AACI,cAAGD,SAAH,EAAaZ,GAAG,CAACE,IAAD,CAAH;;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import ReactDOM from 'react-dom'\r\nfunction strip(html){\r\n    var doc = new DOMParser().parseFromString(html, 'text/html');\r\n    return doc.body.textContent || \"\";\r\n }\r\nexport default async function changeLanguage(set,theRef){\r\n    let lang = prompt('language');\r\n    let win = (open('https://'.concat(lang.concat('.wikipedia.org')),{mode: 'cors'}));\r\n    let confirmed = await new Promise(c => {    ReactDOM.render(<p><button onClick = {c.bind(null,true)}>Confirm</button><button onClick = {c.bind(null,false)}>Cancel</button></p>,theRef.current);})\r\n\r\nwin.close();\r\n    if(confirmed)set(lang)\r\n    }"]},"metadata":{},"sourceType":"module"}
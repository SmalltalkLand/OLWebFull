{"ast":null,"code":"import { useRef, useEffect } from 'react';\nexport default function useEventListener(eventName, handler, onName, offName, element = window) {\n  // Create a ref that stores handler\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    // On \n    const isSupported = element && element[onName];\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element[onName](eventName, eventListener); // Remove event listener on cleanup\n\n    return () => {\n      element[offName](eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport * as R from 'ramda';\nexport default (React => mode => (desktop, lib, addWindow) => appCode => {\n  let w = new Worker(URL.createObjectURL(new Blob(appCode)));\n  let morohClassMap = new _Map();\n\n  let newMoroh = desc => R.pipe([R.props(['desc', 'children']), ndesc => [ndesc[0] ? _Object$assign({}, desc, ndesc[0]) : desc, ndesk[1]], desc => __jsx(lib.Div, {\n    onClick: w.postMessage.bind(w, desc[0].clickMessage),\n    style: {\n      bg: desc[0].color,\n      \"backgroundColor\": desc[0].color\n    }\n  }, desk[1].concat(desc[0].children.map(c => (MC => __jsx(MC, null))(newMoroh(c)))))]);\n\n  w.addEventListener('message', R.pipe([m => m.data, R.cond([[d => d.type === 'post_canvas', R.pipe([d => d.data, d => [d, document.createElement('canvas')], d => ({\n    canvas: d[1],\n    d: d[0],\n    id: d[0].name,\n    render: R.pipe([rct => [rct, d[1]], a => __jsx(lib.Div, {\n      ref: R.pipe([e => e.appendChild.bind(e), R.partialRight(R.call, a[1])])\n    })])\n  }), R.tap(addWindow), R.props('canvas', 'd'), c => [c[0].transferControlToOffscreen(), c[1]], nc => [{\n    type: 'return',\n    data: {\n      id: nc[1].id,\n      canvas: nc[0]\n    }\n  }, nc[0]], R.apply.bind(R, w.postMessage.bind(w))])], [d => d.type === 'create_moroh', R.pipe([d => d.data, d => [d[0], newMoroh(d[1])], R.tap(R.apply.bind(R, morohClassMap.set.bind(morohClassMap)))])], [d => d.type === 'moroh_in_window', R.pipe([d => d.data, R.props('id', 'wid'), d => [morohClassMap.get(d[0]), d[1]], d => [{\n    id: d[1],\n    render: rct => (C => __jsx(C, null))(d[0])\n  }], R.tap(addWindow)])]])]));\n});","map":null,"metadata":{},"sourceType":"module"}
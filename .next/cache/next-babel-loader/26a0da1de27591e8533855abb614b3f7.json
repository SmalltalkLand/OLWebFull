{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState } from 'react';\nimport root from 'react-shadow';\nimport { chromeSwitch } from '../../../OLEx/dist/index.js';\nimport * as Polyglot from 'node-polyglot';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport DragControls from 'three-dragcontrols';\nexport let Box = React.forwardRef(function Box(props, ref) {\n  // Set up state for the hovered and active state\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  return __jsx(\"mesh\", _extends({}, props, {\n    ref: ref,\n    scale: (hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(v => v * props.scale),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false)\n  }), __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1].map(v => v * props.scale)\n  }), __jsx(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: props.color\n  }));\n});\n\nlet ThreeRef = props => {\n  props.setThree(useThree());\n  return null;\n};\n\nexport default (props => {\n  let Desktop = props.dcls;\n  let {\n    0: {\n      camera,\n      gl\n    },\n    1: setThree\n  } = useState();\n  let {\n    0: objs,\n    1: setObjs\n  } = useState();\n  if (!objs) setObjs([]);\n  useEffect(() => {\n    let d = new DragControls(objs, camera, gl.domElements);\n    return d.dispose.bind(d);\n  }, [props.dcls, objs]);\n  return __jsx(Canvas, null, __jsx(Desktop, {\n    Div: Box,\n    Window: wprops => {\n      let r = useRef();\n      useEffect(() => {\n        setObjs((objs || []).concat([r.current]));\n        return () => setObjs(objs.filter(o => o !== r.current));\n      });\n      return __jsx(Box, _extends({}, wprops, {\n        ref: r\n      }));\n    },\n    Iframe: Box\n  }), __jsx(ThreeRef, {\n    setThree: setThree\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}
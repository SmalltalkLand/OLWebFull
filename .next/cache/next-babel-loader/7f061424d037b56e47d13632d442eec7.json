{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport root from 'react-shadow';\nimport { chromeSwitch } from '../../../OLEx/dist/index.js';\nimport * as Polyglot from 'node-polyglot';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport DragControls from 'three-dragcontrols';\nexport var Box = React.forwardRef(function Box(props, ref) {\n  // Set up state for the hovered and active state\n  var _useState = useState(false),\n      hovered = _useState[0],\n      setHover = _useState[1]; // Rotate mesh every frame, this is outside of React without overhead\n\n\n  return __jsx(\"mesh\", _extends({}, props, {\n    ref: ref,\n    scale: (hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(function (v) {\n      return v * props.scale;\n    }),\n    onPointerOver: function onPointerOver(e) {\n      return setHover(true);\n    },\n    onPointerOut: function onPointerOut(e) {\n      return setHover(false);\n    }\n  }), __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1].map(function (v) {\n      return v * props.scale;\n    })\n  }), __jsx(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: props.color\n  }));\n});\n\nvar ThreeRef = function ThreeRef(props) {\n  props.setThree(useThree());\n  return null;\n};\n\nexport default (function (props) {\n  var Desktop = props.dcls;\n\n  var _useState2 = useState(),\n      three = _useState2[0],\n      setThree = _useState2[1];\n\n  if (three) var camera = three.camera,\n      gl = three.gl;\n\n  var _useState3 = useState(),\n      objs = _useState3[0],\n      setObjs = _useState3[1];\n\n  if (!objs) setObjs([]);\n  useEffect(function () {\n    var d = new DragControls(objs, camera, gl.domElements);\n    return d.dispose.bind(d);\n  }, [props.dcls, objs]);\n  return __jsx(Canvas, null, __jsx(Desktop, {\n    Div: Box,\n    Window: function Window(wprops) {\n      var r = useRef();\n      useEffect(function () {\n        setObjs((objs || []).concat([r.current]));\n        return function () {\n          return setObjs(objs.filter(function (o) {\n            return o !== r.current;\n          }));\n        };\n      });\n      return __jsx(Box, _extends({}, wprops, {\n        ref: r\n      }));\n    },\n    Iframe: Box\n  }), __jsx(ThreeRef, {\n    setThree: setThree\n  }));\n});","map":{"version":3,"sources":["D:/Graham/ObjectLand/main/OLWebFull/pages/3desktop/index.js"],"names":["React","useRef","useState","useEffect","root","chromeSwitch","Polyglot","Canvas","useFrame","useThree","DragControls","Box","forwardRef","props","ref","hovered","setHover","map","v","scale","e","color","ThreeRef","setThree","Desktop","dcls","three","camera","gl","objs","setObjs","d","domElements","dispose","bind","wprops","r","concat","current","filter","o"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\r\nimport root from 'react-shadow';\r\nimport {chromeSwitch} from '../../../OLEx/dist/index.js'\r\nimport * as Polyglot from 'node-polyglot'\r\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\r\nimport DragControls from 'three-dragcontrols';\r\nexport let Box = React.forwardRef(function Box(props,ref) {\r\n    \r\n    // Set up state for the hovered and active state\r\n    const [hovered, setHover] = useState(false)\r\n    \r\n    // Rotate mesh every frame, this is outside of React without overhead\r\n    \r\n    return (\r\n      <mesh\r\n        {...props}\r\n        ref={ref}\r\n        scale={(hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(v => v * props.scale)}\r\n        onPointerOver={e => setHover(true)}\r\n        onPointerOut={e => setHover(false)}>\r\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1].map(v => v * props.scale)} />\r\n        <meshStandardMaterial attach=\"material\" color={props.color} />\r\n      </mesh>\r\n    )\r\n  })\r\n  let ThreeRef = props => {props.setThree(useThree()); return null};\r\nexport default props => {let Desktop = props.dcls;let [three,setThree] = useState(); if(three)var {camera,gl} = three;let [objs,setObjs] = useState(); if(!objs)setObjs([]); useEffect(() => {let d = new DragControls(objs,camera,gl.domElements);return d.dispose.bind(d)},[props.dcls,objs]); return (<Canvas>\r\n <Desktop Div = {Box} Window = {wprops => {let r = useRef();useEffect(() => {setObjs((objs || []).concat([r.current])); return () => setObjs(objs.filter(o => o !== r.current))}); return (<Box {...wprops} ref = {r}></Box>)}} Iframe = {Box}></Desktop>\r\n<ThreeRef setThree = {setThree}></ThreeRef>\r\n</Canvas>)}"]},"metadata":{},"sourceType":"module"}
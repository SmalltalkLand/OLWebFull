{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport * as R from 'ramda';\nvar Inspector;\nexport default Inspector = R.pipe(function (props) {\n  return _Object$assign({}, props, props.lib);\n}, function (props) {\n  var _props$obj$key;\n\n  var _useState = useState([]),\n      key = _useState[0],\n      setKey = _useState[1];\n\n  var isReactComponent = props.obj instanceof Function;\n  return __jsx(props.Tabs.Tabs, null, __jsx(props.Tabs.Tab, {\n    title: 'Inspect'\n  }, __jsx(props.Div, null, __jsx(props.List, {\n    all: _Object$keys(props.obj),\n    selected: key,\n    onSelect: setKey\n  }), __jsx(props.Div, {\n    direction: 'ttb'\n  }, __jsx(props.TextArea, {\n    value: (_props$obj$key = props.obj[key]) === null || _props$obj$key === void 0 ? void 0 : _props$obj$key.toString()\n  }), __jsx(Inspector, {\n    obj: props.obj[key]\n  })))), isReactComponent && props.obj.wantsToBeInspectedAsReact ? __jsx(props.Tabs.Tab, {\n    title: 'Use'\n  }, __jsx(props.Window, null, __jsx(props.obj, null))) : null);\n});","map":{"version":3,"sources":["/home/graham/st/OLWebFull/src/Inspector.js"],"names":["React","useState","R","Inspector","pipe","props","lib","key","setKey","isReactComponent","obj","Function","toString","wantsToBeInspectedAsReact"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,IAAIC,SAAJ;AACA,eAAeA,SAAS,GAAGD,CAAC,CAACE,IAAF,CAAO,UAAAC,KAAK;AAAA,SAAI,eAAc,EAAd,EAAiBA,KAAjB,EAAuBA,KAAK,CAACC,GAA7B,CAAJ;AAAA,CAAZ,EAAkD,UAAAD,KAAK,EAAI;AAAA;;AAAA,kBAAoBJ,QAAQ,CAAC,EAAD,CAA5B;AAAA,MAAMM,GAAN;AAAA,MAAUC,MAAV;;AAAiC,MAAIC,gBAAgB,GAAGJ,KAAK,CAACK,GAAN,YAAqBC,QAA5C;AAAqD,SAAQ,MAAC,KAAD,CAAO,IAAP,CAAY,IAAZ,QAChL,MAAC,KAAD,CAAO,IAAP,CAAY,GAAZ;AAAgB,IAAA,KAAK,EAAI;AAAzB,KACI,MAAC,KAAD,CAAO,GAAP,QACI,MAAC,KAAD,CAAO,IAAP;AAAY,IAAA,GAAG,EAAI,aAAYN,KAAK,CAACK,GAAlB,CAAnB;AAA2C,IAAA,QAAQ,EAAIH,GAAvD;AAA4D,IAAA,QAAQ,EAAGC;AAAvE,IADJ,EAEI,MAAC,KAAD,CAAO,GAAP;AAAW,IAAA,SAAS,EAAI;AAAxB,KACI,MAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,oBAAIH,KAAK,CAACK,GAAN,CAAUH,GAAV,CAAJ,mDAAI,eAAgBK,QAAhB;AAAzB,IADJ,EAEI,MAAC,SAAD;AAAW,IAAA,GAAG,EAAIP,KAAK,CAACK,GAAN,CAAUH,GAAV;AAAlB,IAFJ,CAFJ,CADJ,CADgL,EAU/KE,gBAAgB,IAAIJ,KAAK,CAACK,GAAN,CAAUG,yBAA9B,GAA2D,MAAC,KAAD,CAAO,IAAP,CAAY,GAAZ;AAAgB,IAAA,KAAK,EAAI;AAAzB,KACxD,MAAC,KAAD,CAAO,MAAP,QACI,MAAC,KAAD,CAAO,GAAP,OADJ,CADwD,CAA3D,GAMoB,IAhB2J,CAAR;AAiBxJ,CAjBO,CAA3B","sourcesContent":["import React, {useState} from 'react'\nimport * as R from 'ramda'\nlet Inspector;\nexport default Inspector = R.pipe(props => Object.assign({},props,props.lib),props => {let [key,setKey] = useState([]);let isReactComponent = props.obj instanceof Function;return (<props.Tabs.Tabs>\n    <props.Tabs.Tab title = {'Inspect'}>\n        <props.Div>\n            <props.List all = {Object.keys(props.obj)} selected = {key} onSelect= {setKey}></props.List>\n            <props.Div direction = {'ttb'}>\n                <props.TextArea value = {props.obj[key]?.toString()}></props.TextArea>\n                <Inspector obj = {props.obj[key]}></Inspector>\n            </props.Div>\n        </props.Div>\n    </props.Tabs.Tab>\n    {isReactComponent && props.obj.wantsToBeInspectedAsReact ? (<props.Tabs.Tab title = {'Use'}>\n        <props.Window>\n            <props.obj></props.obj>\n\n        </props.Window>\n\n    </props.Tabs.Tab>) : null}\n</props.Tabs.Tabs>)})"]},"metadata":{},"sourceType":"module"}
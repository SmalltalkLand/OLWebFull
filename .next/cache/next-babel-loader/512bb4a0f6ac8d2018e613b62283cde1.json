{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _Map from \"@babel/runtime-corejs2/core-js/map\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport root from 'react-shadow';\nimport Window_ from '../../src/Window.js';\nimport Iframe_ from '../../src/Iframe.js';\nimport MainWelcomePage from '../index.js';\nimport Desktop3D from '../3desktop/index.js';\nimport { chromeSwitch } from '../../../OLEx/dist/index.js';\nimport DiscordPolyfill from '../../src/DiscordPolyfill.js';\nimport Discord from '../discord/index.js';\nimport { withObserver, MutationObserver } from 'react-mutation-observer';\nimport AAPI from '../../src/appi.js';\nimport * as R from 'ramda';\nimport * as Polyglot from 'node-polyglot';\nexport default class extends React.Component {\n  constructor(props = {}) {\n    super(props);\n    this.state = {\n      objectTagSheet: {},\n      HotTable: null,\n      appDataMap: new _Map(),\n      windows: []\n    };\n    this.aapi_ = AAPI(React)(props.mode);\n\n    this.aapi = code => this.aapi_(this, this.addWindow.bind(this))(code);\n\n    this.onSnapMessage = this.onSnapMessage.bind(this);\n\n    try {\n      this.renderExWinPossibly = chromeSwitch(() => __jsx(\"span\", null), this.renderExWin.bind(this));\n    } catch (err) {\n      this.renderExWinPossibly = () => __jsx(\"span\", null);\n    }\n\n    ;\n    var f;\n\n    try {\n      f = fetch;\n    } catch (err) {\n      f = () => _Promise.reject();\n    }\n\n    ;\n    f('/pages/api/usr').then(r => r.text()).then(t => {}).catch(err => {});\n\n    try {\n      if (navigator) import('@handsontable/react').then(m => this.mounted && this.setState({\n        HotTable: m.HotTable\n      }));\n    } catch (err) {}\n\n    ;\n  }\n\n  componentDidUpdate(prevProps) {\n    // Typical usage (don't forget to compare props):\n    if (prevProps.mode !== this.props.mode) this.aapi_ = AAPI(React)(this.props.mode);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  addWindow(w) {\n    return new _Promise(c => this.setState(s => ({\n      windows: s.windows.concat([w])\n    }), c));\n  }\n\n  removeWindow(w) {\n    return new _Promise(c => this.setState(s => ({\n      windows: s.windows.filter(sw => sw.id !== w.id)\n    })));\n  }\n\n  renderExWin(Div, Window) {\n    return __jsx(Window, null, __jsx(Div, null));\n  }\n\n  get discord() {\n    return this.props.discord || DiscordPolyfill(this);\n  }\n\n  render() {\n    let HotTable;\n\n    try {\n      if (navigator) HotTable = this.state.HotTable;\n    } catch (err) {\n      HotTable = function (props) {\n        return __jsx(\"span\", null);\n      };\n    }\n\n    ;\n    let isBrowser = false;\n\n    try {\n      navigator;\n      isBrowser = true;\n    } catch (err) {}\n\n    ;\n    let discord = this.discord;\n    let Div = this.props.div || root.div;\n    let Window = this.props.Window || Window_;\n    let Iframe = this.props.Iframe || Iframe_;\n    let MyMutationObserver = this.props.observer || MutationObserver;\n\n    MyMutationObserver = (Old => props => __jsx(Old, _extends({}, props, {\n      subtree: true\n    }), props.children))(MyMutationObserver);\n\n    let windows = (this.props.windows || []).concat(this.props.div === null ? [{\n      id: 'welcome',\n      render: React => {\n        return __jsx(MainWelcomePage, null);\n      }\n    }] : []).concat(discord ? [{\n      id: 'discord',\n      render: (React, lib) => {\n        let theDiscord = Discord(React, useState);\n        return __jsx(lib.Div, null, __jsx(\"theDiscord\", {\n          lib: lib,\n          discord: discord\n        }));\n      }\n    }] : []).concat(isBrowser ? [{\n      id: 'three',\n      render: rct => __jsx(Desktop3d, {\n        dcls: Desktop,\n        linkParent: this\n      })\n    }] : []).concat([]).concat(this.state.windows);\n    return __jsx(MyMutationObserver, null, __jsx(Div, null, this.props.div === null ? __jsx(\"div\", {\n      className: 'External'\n    }, this.props.children, __jsx(\"slot\", null)) : null, __jsx(Window, null, HotTable && __jsx(HotTable, null)), this.renderExWinPossibly(Div, Window), windows.map(w => __jsx(MyMutationObserver, null, __jsx(Window, {\n      key: w.id\n    }, __jsx(MyMutationObserver, null, w.render(React, {\n      div: Div\n    }, this.state.appDataMap.get(w.id), v => {\n      this.setState({\n        appDataMap: new _Map(this.state.appDataMap).set(w.id, v)\n      });\n    })))))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}
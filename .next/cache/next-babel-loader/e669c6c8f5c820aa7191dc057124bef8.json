{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React, { useRef, useState, useEffect } from 'react';\nimport root from 'react-shadow';\nimport * as Polyglot from 'node-polyglot';\nimport { Canvas, useFrame, useThree, Dom } from 'react-three-fiber';\nimport DragControls from 'three-dragcontrols';\nexport let Box = React.forwardRef(function Box(props, ref) {\n  // Set up state for the hovered and active state\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  return __jsx(\"mesh\", _extends({}, props, {\n    ref: ref,\n    scale: (hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(v => v * props.scale),\n    onPointerOver: e => setHover(true),\n    onPointerOut: e => setHover(false)\n  }), __jsx(\"boxBufferGeometry\", {\n    attach: \"geometry\",\n    args: [1, 1, 1].map(v => v * props.scale)\n  }), __jsx(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: props.color\n  }));\n});\n\nlet ThreeRef = props => {\n  props.setThree(useThree());\n  return null;\n};\n\nlet DOMCanvas = props => __jsx(Dom, null, __jsx(\"canvas\", _extends({\n  ref: props.onCanvas\n}, props)));\n\nexport default (props => {\n  let Desktop = props.dcls;\n  let {\n    0: three,\n    1: setThree\n  } = useState();\n  if (three) var {\n    camera,\n    gl\n  } = three;\n  let {\n    0: objs,\n    1: setObjs\n  } = useState();\n  if (!objs) setObjs([]);\n  useEffect(() => {\n    if (gl) {\n      let d = new DragControls(objs, camera, gl.domElements);\n      return d.dispose.bind(d);\n    }\n  }, [props.dcls, objs]);\n  return __jsx(Canvas, null, __jsx(Desktop, {\n    Div: Box,\n    Canvas: DOMCanvas,\n    Window: wprops => {\n      let r = useRef();\n      useEffect(() => {\n        setObjs((objs || []).concat([r.current]));\n        return () => setObjs(objs.filter(o => o !== r.current));\n      });\n      return __jsx(Box, _extends({}, wprops, {\n        ref: r\n      }));\n    },\n    Iframe: Box\n  }), __jsx(ThreeRef, {\n    setThree: setThree\n  }));\n});","map":{"version":3,"sources":["/home/graham/st/OLWebFull/pages/3desktop/index.js"],"names":["React","useRef","useState","useEffect","root","Polyglot","Canvas","useFrame","useThree","Dom","DragControls","Box","forwardRef","props","ref","hovered","setHover","map","v","scale","e","color","ThreeRef","setThree","DOMCanvas","onCanvas","Desktop","dcls","three","camera","gl","objs","setObjs","d","domElements","dispose","bind","wprops","r","concat","current","filter","o"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport root from 'react-shadow';\nimport * as Polyglot from 'node-polyglot'\nimport { Canvas, useFrame, useThree, Dom } from 'react-three-fiber'\nimport DragControls from 'three-dragcontrols';\nexport let Box = React.forwardRef(function Box(props,ref) {\n    \n    // Set up state for the hovered and active state\n    const [hovered, setHover] = useState(false)\n    \n    // Rotate mesh every frame, this is outside of React without overhead\n    \n    return (\n      <mesh\n        {...props}\n        ref={ref}\n        scale={(hovered ? [1.5, 1.5, 1.5] : [1, 1, 1]).map(v => v * props.scale)}\n        onPointerOver={e => setHover(true)}\n        onPointerOut={e => setHover(false)}>\n        <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1].map(v => v * props.scale)} />\n        <meshStandardMaterial attach=\"material\" color={props.color} />\n      </mesh>\n    )\n  })\n  let ThreeRef = props => {props.setThree(useThree()); return null};\n  let DOMCanvas = props => (<Dom><canvas ref = {props.onCanvas} {...props}></canvas></Dom>)\nexport default props => {let Desktop = props.dcls;let [three,setThree] = useState(); if(three)var {camera,gl} = three;let [objs,setObjs] = useState(); if(!objs)setObjs([]); useEffect(() => {if(gl){let d = new DragControls(objs,camera,gl.domElements);return d.dispose.bind(d)}},[props.dcls,objs]); return (<Canvas>\n <Desktop Div = {Box} Canvas = {DOMCanvas} Window = {wprops => {let r = useRef();useEffect(() => {setObjs((objs || []).concat([r.current])); return () => setObjs(objs.filter(o => o !== r.current))}); return (<Box {...wprops} ref = {r}></Box>)}} Iframe = {Box}></Desktop>\n<ThreeRef setThree = {setThree}></ThreeRef>\n</Canvas>)}"]},"metadata":{},"sourceType":"module"}
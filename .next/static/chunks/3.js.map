{"version":3,"file":"static/chunks/3.js","sources":["webpack:///./node_modules/chrome-promise/chrome-promise.js","webpack:///./node_modules/chrome-promise/index.js"],"sourcesContent":["/*!\n * chrome-promise\n * https://github.com/tfoxy/chrome-promise\n *\n * Copyright 2015 Tom√°s Fox\n * Released under the MIT license\n */\n\n(function(root, factory) {\n  if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(this || root);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory.bind(null, this || root));\n  } else {\n    // Browser globals (root is window)\n    root.ChromePromise = factory(root);\n    var script = document.currentScript;\n    if (script) {\n      var name = script.dataset.instance;\n      if (name) {\n        root[name] = new root.ChromePromise();\n      }\n    }\n  }\n}(typeof self !== 'undefined' ? self : this, function(root) {\n  'use strict';\n  var slice = Array.prototype.slice,\n      hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  // Temporary hacky fix to make TypeScript `import` work\n  ChromePromise.default = ChromePromise;\n\n  return ChromePromise;\n\n  ////////////////\n\n  function ChromePromise(options) {\n    options = options || {};\n    var chrome = options.chrome || root.chrome;\n    var Promise = options.Promise || root.Promise;\n    var runtime = chrome.runtime;\n    var self = this;\n    if (!self) throw new Error('ChromePromise must be called with new keyword');\n\n    fillProperties(chrome, self);\n\n    if (chrome.permissions) {\n      chrome.permissions.onAdded.addListener(permissionsAddedListener);\n    }\n\n    ////////////////\n\n    function setPromiseFunction(fn, thisArg) {\n\n      return function() {\n        var args = slice.call(arguments);\n\n        return new Promise(function(resolve, reject) {\n          args.push(callback);\n\n          fn.apply(thisArg, args);\n\n          function callback() {\n            var err = runtime.lastError;\n            var results = slice.call(arguments);\n            if (err) {\n              reject(err);\n            } else {\n              switch (results.length) {\n                case 0:\n                  resolve();\n                  break;\n                case 1:\n                  resolve(results[0]);\n                  break;\n                default:\n                  resolve(results);\n              }\n            }\n          }\n        });\n\n      };\n\n    }\n\n    function fillProperties(source, target) {\n      for (var key in source) {\n        if (hasOwnProperty.call(source, key)) {\n          var val;\n          // Sometime around Chrome v71, certain deprecated methods on the\n          // extension APIs started using proxies to throw an error if the\n          // deprecated methods were accessed, regardless of whether they\n          // were invoked or not.  That would cause this code to throw, even\n          // if no one was actually invoking that method.\n          try {\n            val = source[key];\n          } catch(err) {\n           continue;\n          }\n          var type = typeof val;\n\n          if (type === 'object' && !(val instanceof ChromePromise)) {\n            target[key] = {};\n            fillProperties(val, target[key]);\n          } else if (type === 'function') {\n            target[key] = setPromiseFunction(val, source);\n          } else {\n            target[key] = val;\n          }\n        }\n      }\n    }\n\n    function permissionsAddedListener(perms) {\n      if (perms.permissions && perms.permissions.length) {\n        var approvedPerms = {};\n        perms.permissions.forEach(function(permission) {\n          var api = /^[^.]+/.exec(permission);\n          if (api in chrome) {\n            approvedPerms[api] = chrome[api];\n          }\n        });\n        fillProperties(approvedPerms, self);\n      }\n    }\n  }\n}));\n","var ChromePromise = require('./chrome-promise');\n\nvar chromep = new ChromePromise();\n// Temporary hacky fix to make TypeScript `import` work\nchromep.default = chromep;\n\nmodule.exports = chromep;\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAanIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}